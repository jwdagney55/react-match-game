{"version":3,"sources":["components/Card.tsx","classes/GameCard.ts","Game-Board.tsx","components/ScoreCard.tsx","reportWebVitals.ts","index.tsx"],"names":["Card","cardNum","cards","setMyCards","console","log","num","handleClick","map","c","cardPic","newCards","isFlipped","flipDirection","className","src","process","onClick","alt","toString","sport","error","FindCard","GameCard","foundMatch","this","GameBoard","sportCards","picOrder","size","ret","Array","index","picIdx","picPlaced","arrIdx","Math","floor","random","finalPlaced","idx","selectOrder","length","cardsData","push","React","useState","myCards","i","j","firstRow","slice","card","ScoreCard","score","totalScore","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eee8aeac.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactCardFlip from 'react-card-flip';\r\nimport { GameCard } from '../classes/GameCard'\r\n\r\n\r\nimport '../Game-Board.css';\r\n\r\n\r\nexport function Card({cardNum, cards, setMyCards} : {cardNum: number, cards: GameCard[], setMyCards:(cards:GameCard[]) => void}): JSX.Element {\r\n    console.log(\"in Card\");\r\n\r\n    const handleClick = () => {\r\n        console.log(cards.map(c => c.cardPic));\r\n        let newCards: GameCard[] = [...cards];\r\n        newCards[cardNum-1] = {...newCards[cardNum-1], isFlipped: !newCards[cardNum-1].isFlipped}\r\n        console.log(newCards.map(c => c.cardPic));\r\n        setMyCards(newCards)\r\n    }\r\n\r\n    const FindNum = (num:number): JSX.Element => {\r\n        return <img className=\"Game-Card\" src={process.env.PUBLIC_URL + \"/images/Card\" + num + \".png\"} onClick={handleClick} alt={num.toString()} />;\r\n    }\r\n\r\n    const FindCard = (sport:string): JSX.Element => {\r\n        //Attempting to catch an error if the file does not exist, but don't know how to do that.\r\n        try {\r\n            console.log(\"trying\");\r\n            return <img className=\"Game-Card\" src={process.env.PUBLIC_URL + \"/images/sports/\" + sport + \".png\"} onClick={handleClick} alt={sport} />;\r\n        } catch (error) {\r\n            console.log(error, \"found error\");\r\n            return <img className=\"Game-Card\" src={process.env.PUBLIC_URL + \"/images/notfound.png\"} onClick={handleClick} alt={sport} />;\r\n        }\r\n    }\r\n    return (\r\n\r\n        <td>\r\n            <ReactCardFlip isFlipped = {!cards[cardNum-1].isFlipped} flipDirection=\"vertical\"  >\r\n                {FindNum(cards[cardNum-1].cardNum)}\r\n\r\n                {FindCard(cards[cardNum-1].cardPic)}\r\n\r\n            </ReactCardFlip>\r\n        </td>\r\n        \r\n        //<p>Hello1</p>\r\n    )\r\n}\r\n\r\n/*\r\nfunction Card(stuff: {cardNum: number; word: string}): JSX.Element {\r\n    console.log(\"In Card\");\r\n    const [isFlipped, setIsFlipped] = React.useState(false);\r\n\r\n    const handleClick = () => {\r\n        setIsFlipped(!isFlipped);\r\n    }\r\n\r\n\r\n    const FindNum = (num:number): JSX.Element => {\r\n        return <img className=\"Game-Card\" src={process.env.PUBLIC_URL + \"/images/Card\" + num + \".png\"} onClick={handleClick} alt={num.toString()} />;\r\n    }\r\n\r\n    const FindCard = (sport:string): JSX.Element => {\r\n        //Attempting to catch an error if the file does not exist, but don't know how to do that.\r\n        try {\r\n            console.log(\"trying\");\r\n            return <img className=\"Game-Card\" src={process.env.PUBLIC_URL + \"/images/sports/\" + sport + \".png\"} onClick={handleClick} alt={sport} />;\r\n        } catch (error) {\r\n            console.log(error, \"found error\");\r\n            return <img className=\"Game-Card\" src={process.env.PUBLIC_URL + \"/images/notfound.png\"} onClick={handleClick} alt={sport} />;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <td>\r\n            <ReactCardFlip isFlipped = {isFlipped} flipDirection=\"vertical\" >\r\n            {FindNum(stuff.cardNum)}\r\n\r\n            {FindCard(stuff.word)}\r\n            </ReactCardFlip>\r\n        </td>\r\n        \r\n        \r\n    )\r\n}\r\n*/\r\n\r\n//export function Card;","export class GameCard{\r\n    cardNum: number;\r\n    cardPic: string;\r\n    isFlipped: boolean;\r\n    foundMatch: boolean;\r\n\r\n    constructor(cardNum: number, cardPic: string){\r\n        this.cardNum = cardNum;\r\n        this.cardPic = cardPic;\r\n        this.isFlipped = true;\r\n        this.foundMatch = false;\r\n    }\r\n\r\n}\r\n","import React from 'react';\r\nimport { Card } from './components/Card';\r\nimport { GameCard } from './classes/GameCard';\r\n\r\nimport './Game-Board.css';\r\n\r\nfunction selectOrder(size:number): number[] {\r\n    console.log(\"selecting order\")\r\n    let ret:number[] = new Array(size);\r\n    for (let index = 0; index < size; index++) {\r\n        ret[index] = -1;\r\n    }\r\n    for (let picIdx = 0; picIdx < (size/2) - 1; picIdx++) {\r\n        let picPlaced:number = 0;\r\n        while(picPlaced < 2){\r\n            let arrIdx = Math.floor(Math.random() * size);\r\n            if(ret[arrIdx] === -1){\r\n                ret[arrIdx] = picIdx;\r\n                picPlaced++;\r\n            }\r\n        }   \r\n    }\r\n    let finalPlaced:number = 0;\r\n    let idx:number = 0;\r\n    while(finalPlaced < 2 && idx < size){\r\n        if(ret[idx] === -1){\r\n            ret[idx] = size/2 - 1;\r\n            finalPlaced++;\r\n        }\r\n        idx++;\r\n    }\r\n    return ret;\r\n}\r\n\r\nfunction GameBoard() {\r\n    //Set state of card to be not flipped\r\n    //Hard code the cards in for now\r\n    let sportCards: string[] = ['baseball', 'basketball', 'tennis', 'hockey'];\r\n    let picOrder:number[] = selectOrder(sportCards.length * 2);\r\n    console.log(\"Picture Order: \", picOrder);\r\n    let cardsData:GameCard[] = []; \r\n\r\n    for (let index = 0; index < picOrder.length; index++) {\r\n        cardsData.push(new GameCard(index+1, sportCards[picOrder[index]]))\r\n    }\r\n    let [myCards, setMyCards] = React.useState<GameCard[]>(cardsData)\r\n    console.log(myCards.map(c => c.cardPic));\r\n\r\n    const handleClick = () => {\r\n        for (let i = 0; i < picOrder.length; i++) {\r\n            //Check the number of flipped cards\r\n            console.log(\"Hellow World\")\r\n            for(let j = i+1; j < picOrder.length; j++){\r\n\r\n            const element = picOrder[i];\r\n            }  \r\n        }\r\n    }\r\n\r\n    \r\n    let firstRow:GameCard[] = myCards.slice(0,sportCards.length);\r\n    let secondRow:GameCard[] = myCards.slice(-sportCards.length);\r\n    return(\r\n        <div className=\"Game-Board\">\r\n            <h2>Match Game!</h2>\r\n            \r\n            <table>\r\n                <tbody>\r\n                    <tr> \r\n                        {firstRow.map(card => {\r\n                            return (\r\n                                <td onClick={handleClick}><Card cardNum = {card.cardNum} cards = {myCards} setMyCards = {setMyCards}/></td>\r\n                            )\r\n                        })\r\n                    }\r\n                    </tr>\r\n                    {/*\r\n                    <tr>\r\n                        {secondRow.map(card => {\r\n                            return (\r\n                                <td><Card cardNum={card.cardNum}\r\n                                cardPic={card.cardPic}\r\n                                isFlipped={card.isFlipped}\r\n                                foundMatch={card.foundMatch}\r\n                                getCardNum={card.getCardNum}\r\n                                getcardPic={card.getcardPic}\r\n                                getIsFlipped={card.getIsFlipped}\r\n                                getfoundMatch={card.getfoundMatch}\r\n                                setCardNum={card.setCardNum}\r\n                                setCardPic={card.setCardPic}\r\n                                setIsFlipped={card.setIsFlipped}\r\n                                setfoundMatch={card.setfoundMatch}/></td>\r\n                            )\r\n                        })}\r\n                    </tr>\r\n                    */}\r\n                </tbody>                 \r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameBoard;","import React from 'react';\r\nimport '../Game-Board.css'\r\n\r\nfunction ScoreCard(score: {totalScore: number}): JSX.Element{\r\n\r\n    return (\r\n        <div>\r\n            <p className=\"ScoreCard\">Score 0/{score.totalScore}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ScoreCard;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport GameBoard from './Game-Board'\nimport ScoreCard from './components/ScoreCard'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GameBoard />\n    <ScoreCard totalScore={6} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}