{"version":3,"sources":["components/Card.tsx","Game-Board.tsx","components/ScoreCard.tsx","reportWebVitals.ts","index.tsx"],"names":["Card","stuff","console","log","num","React","useState","isFlipped","setIsFlipped","handleClick","flipDirection","cardNum","className","src","process","onClick","alt","toString","sport","error","FindCard","word","GameBoard","sportCards","picOrder","size","ret","Array","index","picIdx","picPlaced","arrIdx","Math","floor","random","finalPlaced","idx","selectOrder","length","ScoreCard","score","totalScore","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAiDeA,MApCf,SAAcC,GACVC,QAAQC,IAAI,WACZ,IAOiBC,EAPjB,EAAkCC,IAAMC,UAAS,GAAjD,mBAAOC,EAAP,KAAkBC,EAAlB,KAEMC,EAAc,WAChBD,GAAcD,IAmBlB,OAEI,eAAC,IAAD,CAAeA,UAAaA,EAAWG,cAAc,WAArD,WAjBaN,EAkBAH,EAAMU,QAjBZ,qBAAKC,UAAU,YAAYC,IAAKC,gCAA0CV,EAAM,OAAQW,QAASN,EAAaO,IAAKZ,EAAIa,cAGjH,SAACC,GAEd,IAEI,OADAhB,QAAQC,IAAI,UACL,qBAAKS,UAAU,YAAYC,IAAKC,mCAA6CI,EAAQ,OAAQH,QAASN,EAAaO,IAAKE,IACjI,MAAOC,GAEL,OADAjB,QAAQC,IAAIgB,EAAO,eACZ,qBAAKP,UAAU,YAAYC,IAAKC,wCAAiDC,QAASN,EAAaO,IAAKE,KASlHE,CAASnB,EAAMoB,UCuBbC,MA/Bf,WAGI,IAAIC,EAAuB,CAAC,WAAY,aAAc,SAAU,UAC5DC,EAjCR,SAAqBC,GACjBvB,QAAQC,IAAI,mBAEZ,IADA,IAAIuB,EAAe,IAAIC,MAAMF,GACpBG,EAAQ,EAAGA,EAAQH,EAAMG,IAC9BF,EAAIE,IAAU,EAElB,IAAK,IAAIC,EAAS,EAAGA,EAAUJ,EAAK,EAAK,EAAGI,IAExC,IADA,IAAIC,EAAmB,EACjBA,EAAY,GAAE,CAChB,IAAIC,EAASC,KAAKC,MAAMD,KAAKE,SAAWT,IACpB,IAAjBC,EAAIK,KACHL,EAAIK,GAAUF,EACdC,KAMZ,IAFA,IAAIK,EAAqB,EACrBC,EAAa,EACXD,EAAc,GAAKC,EAAMX,IACV,IAAdC,EAAIU,KACHV,EAAIU,GAAOX,EAAK,EAAI,EACpBU,KAEJC,IAEJ,OAAOV,EAQiBW,CAAgC,EAApBd,EAAWe,QAG/C,OAFApC,QAAQC,IAAIqB,GAGR,sBAAKZ,UAAU,aAAf,UACI,6CAEA,gCACI,kCACI,+BACI,6BAAI,cAAC,EAAD,CAAMD,QAAS,EAAGU,KAAME,EAAWC,EAAS,QAChD,6BAAI,cAAC,EAAD,CAAMb,QAAS,EAAGU,KAAME,EAAWC,EAAS,QAChD,6BAAI,cAAC,EAAD,CAAMb,QAAS,EAAGU,KAAME,EAAWC,EAAS,QAChD,6BAAI,cAAC,EAAD,CAAMb,QAAS,EAAGU,KAAME,EAAWC,EAAS,WAEpD,+BACI,6BAAI,cAAC,EAAD,CAAMb,QAAS,EAAGU,KAAME,EAAWC,EAAS,QAChD,6BAAI,cAAC,EAAD,CAAMb,QAAS,EAAGU,KAAME,EAAWC,EAAS,QAChD,6BAAI,cAAC,EAAD,CAAMb,QAAS,EAAGU,KAAME,EAAWC,EAAS,QAChD,6BAAI,cAAC,EAAD,CAAMb,QAAS,EAAGU,KAAME,EAAWC,EAAS,oBC7CzDe,MATf,SAAmBC,GAEf,OACI,8BACI,oBAAG5B,UAAU,YAAb,qBAAkC4B,EAAMC,iBCOrCC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAWZ,WAAY,OAEzBa,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.56694a47.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactCardFlip from 'react-card-flip';\r\n//import * as SPORTS from '/images/sports'\r\n/*\r\nimport baseball from '/images/baseball.png'\r\nimport basketball from '/images/basketball.png'\r\nimport tennis from '/images/tennis.png'\r\n*/\r\n\r\n\r\nimport '../Game-Board.css';\r\n\r\n\r\nfunction Card(stuff: {cardNum: number; word: string}): JSX.Element {\r\n    console.log(\"In Card\");\r\n    const [isFlipped, setIsFlipped] = React.useState(false);\r\n\r\n    const handleClick = () => {\r\n        setIsFlipped(!isFlipped);\r\n    }\r\n\r\n\r\n    const FindNum = (num:number): JSX.Element => {\r\n        return <img className=\"Game-Card\" src={process.env.PUBLIC_URL + \"/images/card\" + num + \".png\"} onClick={handleClick} alt={num.toString()} />;\r\n    }\r\n\r\n    const FindCard = (sport:string): JSX.Element => {\r\n        //Attempting to catch an error if the file does not exist, but don't know how to do that.\r\n        try {\r\n            console.log(\"trying\");\r\n            return <img className=\"Game-Card\" src={process.env.PUBLIC_URL + \"/images/sports/\" + sport + \".png\"} onClick={handleClick} alt={sport} />;\r\n        } catch (error) {\r\n            console.log(error, \"found error\");\r\n            return <img className=\"Game-Card\" src={process.env.PUBLIC_URL + \"/images/notfound.png\"} onClick={handleClick} alt={sport} />;\r\n        }\r\n    }\r\n\r\n    return (\r\n        \r\n        <ReactCardFlip isFlipped = {isFlipped} flipDirection=\"vertical\" >\r\n            {FindNum(stuff.cardNum)}\r\n\r\n            {FindCard(stuff.word)}\r\n        </ReactCardFlip>\r\n        \r\n    )\r\n}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './components/Card';\r\n\r\nimport './Game-Board.css';\r\n\r\nfunction selectOrder(size:number): number[] {\r\n    console.log(\"selecting order\")\r\n    let ret:number[] = new Array(size);\r\n    for (let index = 0; index < size; index++) {\r\n        ret[index] = -1;\r\n    }\r\n    for (let picIdx = 0; picIdx < (size/2) - 1; picIdx++) {\r\n        let picPlaced:number = 0;\r\n        while(picPlaced < 2){\r\n            let arrIdx = Math.floor(Math.random() * size);\r\n            if(ret[arrIdx] === -1){\r\n                ret[arrIdx] = picIdx;\r\n                picPlaced++;\r\n            }\r\n        }   \r\n    }\r\n    let finalPlaced:number = 0;\r\n    let idx:number = 0;\r\n    while(finalPlaced < 2 && idx < size){\r\n        if(ret[idx] === -1){\r\n            ret[idx] = size/2 - 1;\r\n            finalPlaced++;\r\n        }\r\n        idx++;\r\n    }\r\n    return ret;\r\n}\r\n\r\n\r\nfunction GameBoard() {\r\n    //Set state of card to be not flipped\r\n    //Hard code the cards in for now\r\n    let sportCards: string[] = ['baseball', 'basketball', 'tennis', 'hockey'];\r\n    let picOrder:number[] = selectOrder(sportCards.length * 2);\r\n    console.log(picOrder);\r\n\r\n    return(\r\n        <div className=\"Game-Board\">\r\n            <h2>Match Game!</h2>\r\n            \r\n            <table>\r\n                <tbody>\r\n                    <tr> \r\n                        <td><Card cardNum={1} word={sportCards[picOrder[0]]} /></td>\r\n                        <td><Card cardNum={2} word={sportCards[picOrder[1]]} /></td>\r\n                        <td><Card cardNum={3} word={sportCards[picOrder[2]]} /></td>\r\n                        <td><Card cardNum={4} word={sportCards[picOrder[3]]} /></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td><Card cardNum={5} word={sportCards[picOrder[4]]} /></td>\r\n                        <td><Card cardNum={6} word={sportCards[picOrder[5]]} /></td>\r\n                        <td><Card cardNum={7} word={sportCards[picOrder[6]]} /></td>\r\n                        <td><Card cardNum={8} word={sportCards[picOrder[7]]} /></td>\r\n                    </tr>\r\n                </tbody>                 \r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameBoard;","import React from 'react';\r\nimport '../Game-Board.css'\r\n\r\nfunction ScoreCard(score: {totalScore: number}): JSX.Element{\r\n\r\n    return (\r\n        <div>\r\n            <p className=\"ScoreCard\">Score 0/{score.totalScore}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ScoreCard;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport GameBoard from './Game-Board'\nimport ScoreCard from './components/ScoreCard'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GameBoard />\n    <ScoreCard totalScore={6} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}