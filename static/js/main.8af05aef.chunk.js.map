{"version":3,"sources":["components/Card.tsx","classes/GameCard.ts","components/ScoreCard.tsx","Game-Board.tsx","reportWebVitals.ts","index.tsx"],"names":["Card","num","cardNum","cards","setMyCards","setTheScore","handleClick","newCards","isFlipped","idxFlipped","i","length","foundMatch","push","pair","j","cardPic","splice","checkCards","score","flipDirection","className","src","process","onClick","alt","toString","sport","error","console","log","FindCard","GameCard","this","ScoreCard","scores","playerScore","totalScore","GameBoard","React","useState","theScore","sportCards","picOrder","size","ret","Array","index","picIdx","picPlaced","arrIdx","Math","floor","random","finalPlaced","idx","selectOrder","cardsData","myCards","firstRow","slice","secondRow","Form","Group","controlId","Check","type","label","map","card","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8af05aef.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactCardFlip from 'react-card-flip';\r\nimport { GameCard } from '../classes/GameCard'\r\n\r\n\r\nimport '../Game-Board.css';\r\n\r\nconst checkCards = (cards:GameCard[]): GameCard[] => {\r\n    let idxFlipped:number[] = [];\r\n    for(let i = 0; i < cards.length; i++){\r\n        if(cards[i].isFlipped && !cards[i].foundMatch){\r\n            idxFlipped.push(i);\r\n        }\r\n    }\r\n    let pair:boolean = false;\r\n    for(let i = 0; i < idxFlipped.length; i++){\r\n        for(let j = i + 1; j < idxFlipped.length; j++){\r\n            if(cards[idxFlipped[i]].cardPic === cards[idxFlipped[j]].cardPic){\r\n                //console.log(\"Found Match!\", cards[idxFlipped[i]].cardPic, ' = ', cards[idxFlipped[j]].cardPic)\r\n                pair = true;\r\n                cards[idxFlipped[i]] = {...cards[idxFlipped[i]], foundMatch:true};\r\n                cards[idxFlipped[j]] = {...cards[idxFlipped[j]], foundMatch:true};\r\n                idxFlipped.splice(i, 1);\r\n                idxFlipped.splice(j-1, 1);\r\n            }\r\n        }\r\n    }\r\n    if(idxFlipped.length >= 3 || (pair)){\r\n        for(let i = 0; i < idxFlipped.length; i++){\r\n            cards[idxFlipped[i]] = {...cards[idxFlipped[i]], isFlipped:false};\r\n            //console.log(\"Card at idx: \", idxFlipped[i], \" flip state is: \", cards[idxFlipped[i]].isFlipped)\r\n        }\r\n    }\r\n    return cards;\r\n}\r\n\r\n\r\nexport function Card({cardNum, cards, setMyCards, setTheScore} : {cardNum: number, cards: GameCard[], setMyCards:(cards:GameCard[]) => void, setTheScore:(score:number)=>void}): JSX.Element {\r\n    //console.log(\"in Card\");\r\n\r\n    const handleClick = () => {\r\n        let newCards: GameCard[] = [...cards];\r\n        if(newCards[cardNum-1].isFlipped){\r\n            return newCards;\r\n        }\r\n        newCards[cardNum-1] = {...newCards[cardNum-1], isFlipped: !newCards[cardNum-1].isFlipped};\r\n        newCards = [...checkCards(newCards)];\r\n        setMyCards(newCards)\r\n        let score: number = 0;\r\n        for(let i = 0; i < newCards.length; i++){\r\n            if(newCards[i].foundMatch){\r\n                score++;\r\n            }\r\n        }\r\n        setTheScore(score);\r\n    }\r\n\r\n    const FindNum = (num:number): JSX.Element => {\r\n        return <img className=\"Game-Card\" src={process.env.PUBLIC_URL + \"/images/Card\" + num + \".png\"} onClick={handleClick} alt={num.toString()} />;\r\n    }\r\n\r\n    const FindCard = (sport:string): JSX.Element => {\r\n        //Attempting to catch an error if the file does not exist, but don't know how to do that.\r\n        try {\r\n            //console.log(\"trying\");\r\n            return <img className=\"Game-Card\" src={process.env.PUBLIC_URL + \"/images/sports/\" + sport + \".png\"} onClick={handleClick} alt={sport} />;\r\n        } catch (error) {\r\n            console.log(error, \"found error\");\r\n            return <img className=\"Game-Card\" src={process.env.PUBLIC_URL + \"/images/notfound.png\"} onClick={handleClick} alt={sport} />;\r\n        }\r\n    }\r\n    return (\r\n        <ReactCardFlip isFlipped = {cards[cardNum-1].isFlipped} flipDirection=\"vertical\"  >\r\n            {FindNum(cards[cardNum-1].cardNum)}\r\n            \r\n            {FindCard(cards[cardNum-1].cardPic)}\r\n        </ReactCardFlip>\r\n    )\r\n}\r\n","export class GameCard{\r\n    cardNum: number;\r\n    cardPic: string;\r\n    isFlipped: boolean;\r\n    foundMatch: boolean;\r\n\r\n    constructor(cardNum: number, cardPic: string){\r\n        this.cardNum = cardNum;\r\n        this.cardPic = cardPic;\r\n        this.isFlipped = false;\r\n        this.foundMatch = false;\r\n    }\r\n\r\n}\r\n","import React from 'react';\r\nimport '../Game-Board.css'\r\n\r\nfunction ScoreCard(scores: {playerScore: number, totalScore: number}): JSX.Element{\r\n\r\n    return (\r\n        <div>\r\n            <p className=\"ScoreCard\">Score {scores.playerScore}/{scores.totalScore}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ScoreCard;","import React from 'react';\r\nimport { Card } from './components/Card';\r\nimport { GameCard } from './classes/GameCard';\r\nimport ScoreCard from './components/ScoreCard'\r\nimport { Form } from 'react-bootstrap';\r\n\r\nimport './Game-Board.css';\r\n\r\nfunction selectOrder(size:number): number[] {\r\n    //console.log(\"selecting order\")\r\n    let ret:number[] = new Array(size);\r\n    for (let index = 0; index < size; index++) {\r\n        ret[index] = -1;\r\n    }\r\n    for (let picIdx = 0; picIdx < (size/2) - 1; picIdx++) {\r\n        let picPlaced:number = 0;\r\n        while(picPlaced < 2){\r\n            let arrIdx = Math.floor(Math.random() * size);\r\n            if(ret[arrIdx] === -1){\r\n                ret[arrIdx] = picIdx;\r\n                picPlaced++;\r\n            }\r\n        }   \r\n    }\r\n    let finalPlaced:number = 0;\r\n    let idx:number = 0;\r\n    while(finalPlaced < 2 && idx < size){\r\n        if(ret[idx] === -1){\r\n            ret[idx] = size/2 - 1;\r\n            finalPlaced++;\r\n        }\r\n        idx++;\r\n    }\r\n    return ret;\r\n}\r\n\r\nfunction GameBoard() {\r\n    //Hard code the cards in for now\r\n    let [theScore, setTheScore] = React.useState<number>(0);\r\n    let sportCards: string[] = ['baseball', 'basketball', 'tennis', 'hockey'];\r\n    let picOrder:number[] = selectOrder(sportCards.length * 2);\r\n    //console.log(\"Picture Order: \", picOrder);\r\n    let cardsData:GameCard[] = []; \r\n\r\n    for (let index = 0; index < picOrder.length; index++) {\r\n        cardsData.push(new GameCard(index+1, sportCards[picOrder[index]]))\r\n    }\r\n    let [myCards, setMyCards] = React.useState<GameCard[]>(cardsData)\r\n    //console.log(myCards.map(c => c.cardPic));\r\n\r\n    //print out the state of the cards\r\n    //for(let i = 0; i < 8; i++){\r\n        //console.log(\"Card\", myCards[i].cardNum, \": \");\r\n        //console.log(\"Flip State: \", myCards[i].isFlipped, '\\tFound Match: ', myCards[i].foundMatch); \r\n    //}\r\n\r\n    let firstRow:GameCard[] = myCards.slice(0,sportCards.length);\r\n    let secondRow:GameCard[] = myCards.slice(-sportCards.length);\r\n    return(\r\n        <div className=\"Game-Board\">\r\n            <h2>Match Game!</h2>\r\n\r\n            <Form.Group className=\"mb-3\" controlId=\"formBasicCheckbox\" >\r\n                <Form.Check type=\"checkbox\" label=\"Baseball\"/>\r\n                <Form.Check type=\"checkbox\" label=\"Basketball\"/>\r\n                <Form.Check type=\"checkbox\" label=\"Hockey\"/>\r\n                <Form.Check type=\"checkbox\" label=\"Tennis\"/>\r\n            </Form.Group>\r\n\r\n            <table>\r\n                <tbody>\r\n                    <tr> \r\n                        {firstRow.map(card => {\r\n                            return (\r\n                                <td><Card cardNum = {card.cardNum} cards = {myCards} setMyCards = {setMyCards} setTheScore = {setTheScore}/></td>\r\n                            )\r\n                        })\r\n                    }\r\n                    </tr>\r\n                    <tr>\r\n                        {secondRow.map(card => {\r\n                            return (\r\n                                <td><Card cardNum = {card.cardNum} cards = {myCards} setMyCards = {setMyCards} setTheScore = {setTheScore}/></td>\r\n                            )\r\n                        })}\r\n                    </tr>\r\n                </tbody>                 \r\n            </table>\r\n            <ScoreCard playerScore = {theScore} totalScore={myCards.length} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameBoard;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport GameBoard from './Game-Board'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GameBoard  />\n    {/*<ScoreCard totalScore={6} />*/}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}